"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createJestRunner;
var _child_process = require("child_process");
var _path = _interopRequireDefault(require("path"));
var _rootPath = require("../../../utils/rootPath");
/* eslint-disable no-unused-vars */
// import { run } from 'jest';

// function createJestRunner() {
//   let config  from '../configs/jest.config');

//   let argv = process.argv.slice(2);

//   argv.push('--config', JSON.stringify(config(folder)), '--no-cache');
//   run(argv);
// }

// export default createJestRunner;

const jestPath = _path.default.resolve((0, _rootPath.getExecutableBinaryPath)('jest'));

// Command and arguments for npx playwright test
const command = jestPath;
const args = ['--config', require.resolve('../../../../jest.config.js')];
function createJestRunner() {
  // Spawn the child process

  const childProcess = (0, _child_process.spawn)(command, args, {
    stdio: 'inherit'
  });

  // Handling the 'exit' event of the child process
  // childProcess.on('exit', (code, signal) => {
  //   console.log(`Child process exited with code ${code} and signal ${signal}`);
  // });

  // // Handling any error that occurs while spawning the child process
  // childProcess.on('error', (err) => {
  //   console.error(`Error while spawning child process: ${err.message}`);
  // });
}