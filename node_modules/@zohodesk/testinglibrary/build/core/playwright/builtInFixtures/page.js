"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getCustomAccountDetails = getCustomAccountDetails;
var _auth = require("../helpers/auth");
var _readConfigFile = require("../readConfigFile");
/* eslint-disable global-require */

function getTagInputFromSelectedTags(tags, inputString) {
  const selectedTag = [...tags].reverse().find(tag => tag.startsWith(inputString));
  let tagInput = null;
  if (selectedTag) {
    tagInput = selectedTag.split(`${inputString}_`).pop().toLowerCase();
  }
  return tagInput;
}
function getCustomAccountDetails(tags) {
  const tagsTobeFiltered = ['@profile', '@edition', '@beta', '@portal'];
  const filteredTags = tags.filter(tag => tagsTobeFiltered.some(prefix => tag.startsWith(prefix)));
  if (filteredTags && filteredTags.length > 0) {
    const portalInfo = getTagInputFromSelectedTags(filteredTags, '@portal');
    const betaFeature = getTagInputFromSelectedTags(filteredTags, '@beta');
    const profileInfo = getTagInputFromSelectedTags(filteredTags, '@profile');
    const editionInfo = getTagInputFromSelectedTags(filteredTags, '@edition');
    const user = (0, _auth.getUserForSelectedEditionAndProfile)(editionInfo, profileInfo, betaFeature, portalInfo);
    return user;
  }
  return (0, _auth.getDefaultActor)();
}
const {
  testSetup
} = (0, _readConfigFile.generateConfigFromFile)();
async function loginSteps(pageDetail) {
  const {
    page
  } = pageDetail;
  if (testSetup.loginSteps && typeof testSetup.loginSteps === 'function') {
    return await testSetup.loginSteps(pageDetail);
  } else {
    await page.goto(process.env.domain);
  }
}
async function performDefaultPageSteps(testInfo) {
  if (testSetup.page && typeof testSetup.page === 'function') {
    await testSetup.page(testInfo);
  }
}
async function verifyPageIsLoaded(testInfo) {
  if (testSetup.validateLogin && typeof testSetup.validateLogin === 'function') {
    return await testSetup.validateLogin(testInfo);
  }
  return true;
}
var _default = exports.default = {
  page: async ({
    context,
    $tags,
    page,
    executionContext
  }, use, testInfo) => {
    let testPortalDetails = executionContext.actorInfo;
    let testDetails = {
      page,
      $tags,
      context,
      ...testPortalDetails
    };
    try {
      //This block is used to skip the login process if the @unauthenticated tag is added to the script
      if ($tags.includes('@unauthenticated')) {
        await context.clearCookies();
        return;
      }
      const {
        isAuthMode
      } = (0, _readConfigFile.generateConfigFromFile)();
      if (!isAuthMode) {
        return;
      }
      const projectName = testInfo.project.name;
      if (testPortalDetails && projectName !== 'setup' && projectName !== 'cleanup') {
        await context.clearCookies();
        await (0, _auth.performLoginSteps)(testDetails, async testInfo => {
          return await verifyPageIsLoaded(testInfo);
        }, loginSteps);
        process.env.actorInfo = JSON.stringify(testPortalDetails);
      }
    } catch (e) {
      console.error('Error during page', e);
    } finally {
      await performDefaultPageSteps(testDetails);
      await use(page);
      await context.close();
    }
  }
};