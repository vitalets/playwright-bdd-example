"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generateReport;
var _child_process = require("child_process");
var _path = _interopRequireDefault(require("path"));
var _logger = require("../../utils/logger");
var _rootPath = require("../../utils/rootPath");
var _readConfigFile = require("./readConfigFile");
async function generateReport() {
  // await preProcessReport()
  const userArgs = process.argv.slice(3);
  const playwrightPath = _path.default.resolve((0, _rootPath.getExecutableBinaryPath)('playwright'));
  const command = playwrightPath;
  const {
    reportPath: htmlPath
  } = (0, _readConfigFile.generateConfigFromFile)();
  const args = ['show-report', htmlPath].concat(userArgs);
  const childProcess = (0, _child_process.spawn)(command, args, {
    stdio: 'inherit'
  });
  childProcess.on('error', error => {
    _logger.Logger.log(_logger.Logger.FAILURE_TYPE, error);
  });
  childProcess.on('exit', (code, signal) => {
    _logger.Logger.log(_logger.Logger.FAILURE_TYPE, `Child Process Exited with Code ${code} and Signal ${signal}`);
    process.exit();
  });
  process.on('exit', () => {
    _logger.Logger.log(_logger.Logger.INFO_TYPE, 'Terminating Playwright Process...');
    childProcess.kill();
    return;
  });
  process.on('SIGINT', () => {
    _logger.Logger.log(_logger.Logger.INFO_TYPE, 'Cleaning up...');
    childProcess.kill();
    process.exit();
  });
}