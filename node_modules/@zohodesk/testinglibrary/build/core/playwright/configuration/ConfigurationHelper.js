"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineConfiguration = combineConfiguration;
exports.getApplicationConfig = getApplicationConfig;
var _path = _interopRequireDefault(require("path"));
var _logger = require("../../../utils/logger");
var _configFileNameProvider = require("../helpers/configFileNameProvider");
var _mergeObjects = require("../helpers/mergeObjects");
var _fs = require("fs");
const Configuration = require("./Configuration");
function combineConfiguration(defaultConfig, userConfiguration) {
  let configurationObj = {};
  Object.keys(userConfiguration).forEach(configKey => {
    let configValue = userConfiguration[configKey];
    if (configValue !== null && configValue !== undefined) {
      configurationObj[configKey] = configValue;
    } else if (defaultConfig[configKey]) {
      configurationObj[configKey] = defaultConfig[configKey];
    } else {
      _logger.Logger.log(_logger.Logger.INFO_TYPE, `key - ${configKey} is not yet supported in uat configuration. This will not be used while creating playwright configuration`);
    }
  });
  return (0, _mergeObjects.mergeObjects)(defaultConfig, configurationObj);
}
function getApplicationConfig(mode) {
  let filePath = "";
  try {
    filePath = _path.default.resolve(process.cwd(), (0, _configFileNameProvider.getUATFileName)(mode));
    if (!(0, _fs.existsSync)(filePath)) {
      throw new Error("Exception while getting the uat file from the application - " + filePath);
    }
    const config = require(filePath);
    return config;
  } catch (err) {
    _logger.Logger.log(_logger.Logger.FAILURE_TYPE, `Founded Path - ${filePath} Application config file not Exist ...`);
    _logger.Logger.error(err);
    return {};
  }
}