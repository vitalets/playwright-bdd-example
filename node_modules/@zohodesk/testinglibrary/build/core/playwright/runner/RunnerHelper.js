"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RunnerTypes = _interopRequireDefault(require("./RunnerTypes"));
var _configUtils = require("../setup/config-utils");
var _cliArgsToObject = require("../../../utils/cliArgsToObject");
var _browserTypes = require("../constants/browserTypes");
var _customCommands = require("../custom-commands");
class RunnerHelper {
  static createRunner(type, runnerObj) {
    const runnerClass = _RunnerTypes.default.getRunnerClass(type, runnerObj);
    if (!runnerClass) {
      throw new Error("Invalid runner type");
    }
    return runnerClass;
  }
  static getPlaywrightArgs(userArgsObject, debug, bddMode, tagArgs, headless) {
    const {
      browsers = null
    } = userArgsObject;
    let browserList = (0, _configUtils.getBrowsersList)(browsers);
    const playwrightArgs = (0, _cliArgsToObject.objectToCliArgs)(userArgsObject, key => !_customCommands.CUSTOM_COMMANDS.includes(key));
    if (debug) {
      playwrightArgs.push('--debug');
    }
    if (!bddMode && tagArgs) {
      playwrightArgs.push('--grep');
      playwrightArgs.push(tagArgs);
    }
    if (!headless && !userArgsObject.headed) {
      playwrightArgs.push('--headed');
    }
    if (browserList && browserList.length > 0) {
      browserList.map(browser => playwrightArgs.push(`--project=${_browserTypes.BROWSER_PROJECT_MAPPING[browser.toUpperCase()]}`));
    }
    return playwrightArgs;
  }
}
var _default = exports.default = RunnerHelper;