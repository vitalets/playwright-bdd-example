"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generateCodegen;
var _child_process = require("child_process");
var _path = _interopRequireDefault(require("path"));
var _logger = require("../../utils/logger");
var _rootPath = require("../../utils/rootPath");
function generateCodegen() {
  const domainUrl = process.argv.slice(3);
  const playwrightPath = _path.default.resolve((0, _rootPath.getExecutableBinaryPath)('playwright'));
  const command = playwrightPath;
  const args = ['codegen'].concat(domainUrl);
  const childProcess = (0, _child_process.spawn)(command, args, {
    stdio: 'inherit'
  });
  childProcess.on('error', error => {
    _logger.Logger.log(_logger.Logger.FAILURE_TYPE, error);
  });
  childProcess.on('exit', (code, signal) => {
    _logger.Logger.log(_logger.Logger.FAILURE_TYPE, `Child Process Exited with Code ${code} and Signal ${signal}`);
    process.exit();
  });
  process.on('exit', () => {
    _logger.Logger.log(_logger.Logger.INFO_TYPE, 'Terminating Playwright Process...');
    //childProcess.kill();
    return;
  });
  process.on('SIGINT', () => {
    _logger.Logger.log(_logger.Logger.INFO_TYPE, 'Cleaning up...');
    //childProcess.kill();
    process.exit();
  });
}

// Another way to record. Below way will load the url in autheticated state if present
// function generateCodegen() {
//   (async () => {
//     // Make sure to run headed.
//     const browser = await chromium.launch({ headless: false });

//     // Setup context however you like.
//     const context = await browser.newContext({ storageState: path.resolve(process.cwd(), 'uat', 'playwright/.auth/user.json') });
//     await context.route('**/*', route => route.continue());

//     // Pause the page, and start recording manually.
//     const page = await context.newPage();
//     console.log(userArgs.join(''));
//     await page.goto(`https://${userArgs.join('')}`);
//     await page.pause();
//   })();
// }