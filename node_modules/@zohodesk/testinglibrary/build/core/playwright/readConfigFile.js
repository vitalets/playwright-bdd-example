"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateConfigFromFile = generateConfigFromFile;
exports.getAuthFilePath = getAuthFilePath;
exports.getDefaultConfig = getDefaultConfig;
exports.isUserConfigFileAvailable = isUserConfigFileAvailable;
var _fs = require("fs");
var _path = _interopRequireDefault(require("path"));
var _logger = require("../../utils/logger");
var _configFileNameProvider = require("./helpers/configFileNameProvider");
var _mergeObjects = require("./helpers/mergeObjects");
var _Configuration = _interopRequireDefault(require("./configuration/Configuration"));
var _UserArgs = _interopRequireDefault(require("./configuration/UserArgs"));
var _ConfigurationHelper = require("./configuration/ConfigurationHelper");
let cachedConfig = null;
function getDefaultConfig() {
  return {
    uatDirectory: _path.default.join(process.cwd(), 'uat'),
    headless: false,
    browsers: ['Chrome'],
    forbidOnly: false,
    retries: 0,
    trace: false,
    video: false,
    isAuthMode: false,
    openReportOn: 'never',
    reportPath: _path.default.join(process.cwd(), 'uat', 'playwright-report'),
    bddMode: false,
    expectTimeout: 5 * 1000,
    testTimeout: 60 * 1000,
    authFilePath: 'uat/playwright/.auth/user.json',
    viewport: {
      width: 1280,
      height: 720
    },
    debug: false,
    testIdAttribute: 'data-testid',
    additionalPages: {},
    featureFilesFolder: 'feature-files',
    stepDefinitionsFolder: 'steps',
    testSetup: {},
    editionOrder: ['Free', 'Express', 'Standard', 'Professional', 'Enterprise']
  };
}
function combineDefaultConfigWithUserConfig(userConfiguration) {
  let defaultConfig = getDefaultConfig();
  let configurationObj = {};
  Object.keys(userConfiguration).forEach(configKey => {
    let configValue = userConfiguration[configKey];
    if (configValue !== null && configValue !== undefined) {
      configurationObj[configKey] = configValue;
    } else if (defaultConfig[configKey]) {
      configurationObj[configKey] = defaultConfig[configKey];
    } else {
      _logger.Logger.log(_logger.Logger.INFO_TYPE, `key - ${configKey} is not yet supported in uat configuration. This will not be used while creating playwright configuration`);
    }
  });
  return (0, _mergeObjects.mergeObjects)(defaultConfig, configurationObj);
}
/**
 * @typedef {Object|null} viewportConfig
 * @property {number} width - width of the viewport
 * @property {number} height - height of the viewport
 */
/**
 * @typedef {Object|null} viewportConfig
 * @property {number} width - width of the viewport
 * @property {number} height - height of the viewport
 */

/**
 * @typedef {Object|null} testSetupConfig
 * @property {any} page - Function that will be called while setting up page fixtures
 * @property {any} context - Function that will be called while setting up context fixtures
 */

/**
 * Represents the user configuration object.
 * @typedef {Object} UserConfig
 * @property {string} uatDirectory - Directory in which uat configuration is places.
 * @property {string} headless - Headless Browsers mode.
 * @property {number} trace - trace for test cases.
 * @property {boolean} video - video for test cases,
 * @property {boolean} debug - debug mode
 * @property {boolean} isAuthMode -  Auth Mode. config whether authentication step needed before running test cases
 * @property {string} authFilePath - File Path where the cookies stored
 * @property {any} browsers: List of browsers
 * @property {string} openReportOn: default Option value (never, on-failure and always)
 * @property {any} reportPath : directory where report is generate
 * @property {boolean} bddMode: Feature files needs to be processed
 * @property {number} expectTimeout: time in milliseconds which the expect condition should fail
 * @property {number} testTimeout: time in milliseconds which the test should fail
 * @property {Object} additionalPages: custom pages configuration
 * @property {string} featureFilesFolder: folder name under which feature-files will be placed. Default is feature-files
 * @property {string} stepDefinitionsFolder: folder name under which step implementations will be placed. Default is steps
 * @property {viewportConfig} viewport: viewport configuration for the browser. Default is { width: 1280, height: 720 }
 * @property {string} testIdAttribute: Change the default data-testid attribute. configure what attribute to search while calling getByTestId
 * @property {Array} editionOrder: Order in the form of larger editions in the back. Edition with the most privelages should be last
 * @property {testSetupConfig} testSetup: Specify page and context functions that will be called while intilaizing fixtures.
 */

/**
 * Generates a configuration object from a file, if it exists.
 *
 * @returns {UserConfig}
 */

function getConfigFilePath() {
  return _path.default.resolve(process.cwd(), (0, _configFileNameProvider.getUATFileName)());
}
function generateConfigFromFile() {
  if (cachedConfig === null) {
    // Getting the default config's from framework
    const uatConfig = new _Configuration.default(getDefaultConfig());
    // overriding the application config's from project
    const appConfig = new _Configuration.default((0, _ConfigurationHelper.getApplicationConfig)());
    const userArgConfig = new _Configuration.default(_UserArgs.default.parseToObject(process.argv.slice(2)));
    // overriding the user config's from CLI
    uatConfig.addAll(appConfig);
    uatConfig.addAll(userArgConfig);
    cachedConfig = uatConfig.getAll();
  }
  return cachedConfig;
}
function isUserConfigFileAvailable() {
  const filePath = getConfigFilePath();
  if ((0, _fs.existsSync)(filePath)) {
    return true;
  }
  return false;
}
function getAuthFilePath(filePath) {
  try {
    if ((0, _fs.existsSync)(filePath)) {
      return filePath;
    } else {
      return {};
    }
  } catch (err) {
    _logger.Logger.log(_logger.Logger.FAILURE_TYPE, `Founded Path - ${filePath} Authetication file not Exist ...`);
    _logger.Logger.error(err);
  }
}