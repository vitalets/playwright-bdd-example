"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _test = require("@playwright/test");
var _path = _interopRequireDefault(require("path"));
var _readConfigFile = require("../readConfigFile");
var _configUtils = require("./config-utils");
const uatConfig = (0, _readConfigFile.generateConfigFromFile)();
const {
  browsers,
  trace,
  video,
  isAuthMode,
  openReportOn,
  reportPath,
  bddMode,
  expectTimeout,
  testTimeout,
  authFilePath,
  viewport,
  featureFilesFolder,
  stepDefinitionsFolder,
  testIdAttribute,
  globalTimeout,
  customReporter
} = uatConfig;
const projects = (0, _configUtils.getProjects)({
  browsers,
  isAuthMode,
  authFilePath,
  expectTimeout,
  testTimeout,
  viewport
});
const testDir = (0, _configUtils.getTestDir)(bddMode, process.cwd(), {
  featureFilesFolder,
  stepDefinitionsFolder
});
const use = {
  trace,
  video,
  viewport,
  testIdAttribute
};
let reporter = [['html', {
  outputFolder: reportPath,
  open: openReportOn
}], ['list'], ['json', {
  outputFile: _path.default.join(process.cwd(), 'uat', 'test-results', 'test-results.json')
}], ['./custom-reporter.js']];
if (customReporter) {
  reporter = [customReporter, ...reporter];
}

/**
 * Playwright configuration object
 *
 * @returns {import('@playwright/test').PlaywrightTestConfig}
 */
function getPlaywrightConfig() {
  const playwrightConfig = {
    testDir,
    globalTimeout: globalTimeout || 3600000,
    outputDir: _path.default.join(process.cwd(), 'uat', 'test-results'),
    fullyParallel: true,
    reporter,
    timeout: testTimeout,
    expect: {
      timeout: expectTimeout
    },
    use,
    projects: isAuthMode ? [{
      name: 'setup',
      testMatch: /.*\.setup\.js/,
      testDir: _path.default.join(process.cwd(), 'uat'),
      teardown: 'cleanup'
    }, {
      name: 'cleanup',
      testMatch: /.*\.teardown\.js/,
      testDir: _path.default.join(process.cwd(), 'uat')
    }, ...projects] : [...projects],
    ...uatConfig
  };
  return playwrightConfig;
}
var _default = exports.default = (0, _test.defineConfig)(getPlaywrightConfig());