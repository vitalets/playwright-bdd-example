"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _readline = _interopRequireDefault(require("readline"));
var _fileUtils = require("../../../utils/fileUtils");
var _readConfigFile = require("../readConfigFile");
var _logger = require("../../../utils/logger");
var _configFileNameProvider = require("../helpers/configFileNameProvider");
class JSONSummaryReporter {
  constructor() {
    this.durationInMS = -1;
    this.passed = [];
    this.skipped = [];
    this.failed = [];
    this.warned = [];
    this.errored = [];
    this.interrupted = [];
    this.timedOut = [];
    this.flakey = [];
    this.failedSteps = [];
    this.status = 'unknown';
    this.startedAt = 0;
    this._open = (0, _readConfigFile.generateConfigFromFile)().openReportOn;
  }
  onBegin() {
    this.startedAt = Date.now();
  }
  getTitle(test) {
    const title = [];
    const fileName = [];
    let clean = true;
    for (const s of test.titlePath()) {
      if (s === '' && clean) {
        continue;
      }
      clean = false;
      title.push(s);
      if (s.endsWith('.ts') || s.endsWith('.js')) {
        fileName.push(s);
      }
    }

    //Using the fullTitle variable in the push will push a full test name + test description

    return {
      fullTitle: title.join(' > '),
      fileName: fileName[0] || ''
    };
  }
  onTestEnd(test, result) {
    const {
      fullTitle,
      fileName
    } = this.getTitle(test);

    // Set the status
    const stepTitleList = result.steps.filter(step => step.error).map(step => ({
      title: step.title,
      error: step.error,
      testTitle: fullTitle
    }));
    if (stepTitleList.length > 0) {
      this.failedSteps = [...this.failedSteps, ...stepTitleList];
    }
    const status = !['passed', 'skipped'].includes(result.status) && fullTitle.includes('@warn') ? 'warned' : result.status;
    // Logic to push the results into the correct array
    if (result.status === 'passed' && result.retry >= 1) {
      this.flakey.push(fileName);
    } else {
      this[status].push(fileName);
    }
    this[status].push(fileName);
  }
  onError(error) {
    this.errored.push({
      error: error.message,
      stack: error.stack
    });
  }
  onEnd(result) {
    this.durationInMS = Date.now() - this.startedAt;
    this.status = result.status;

    // removing duplicate tests from passed array
    this.passed = this.passed.filter((element, index) => {
      return this.passed.indexOf(element) === index;
    });
    // removing duplicate tests from the failed array
    this.failed = this.failed.filter((element, index) => {
      if (!this.passed.includes(element)) {
        return this.failed.indexOf(element) === index;
      }
    });
    // removing duplicate tests from the skipped array
    this.skipped = this.skipped.filter((element, index) => {
      return this.skipped.indexOf(element) === index;
    });
    // removing duplicate tests from the timedOut array
    this.timedOut = this.timedOut.filter((element, index) => {
      return this.timedOut.indexOf(element) === index;
    });
    // removing duplicate tests from the interrupted array
    this.interrupted = this.interrupted.filter((element, index) => {
      return this.interrupted.indexOf(element) === index;
    });
    this.errored = this.errored.filter((element, index) => {
      return this.errored.indexOf(element) === index;
    });
    if (this.errored.length > 0) {
      // Reflect setup failures in the final report status
      this.status = "failed";
    }

    // fs.writeFileSync('./summary.json', JSON.stringify(this, null, '  '));
    let {
      reportPath
    } = (0, _readConfigFile.generateConfigFromFile)();
    (0, _fileUtils.writeFileContents)(_path.default.join(reportPath, './', (0, _configFileNameProvider.getReportFileName)()), JSON.stringify(this, null, '  '));
  }
  onExit() {
    const shouldClearLastLine = this._open !== 'always' || this._open !== 'on-failure';
    if (shouldClearLastLine) {
      /**Below code is to replace the playwright default report commond with abstraction tool command */
      _readline.default.moveCursor(process.stdout, 0, -2); // up two line
      _readline.default.clearLine(process.stdout, 1); // from cursor to end
      _logger.Logger.log(_logger.Logger.SUCCESS_TYPE, 'npx ZDTestingFramework report or npm run uat-report');
      return;
    }
  }
}
var _default = exports.default = JSONSummaryReporter;