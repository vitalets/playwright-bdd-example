"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _fileMutex = _interopRequireDefault(require("../fileMutex"));
var _fileMutexConfig = require("../../constants/fileMutexConfig");
var _checkAuthCookies = require("./checkAuthCookies");
var _checkAuthDirectory = require("../checkAuthDirectory");
var _fs = require("fs");
/* eslint-disable no-console */

async function performLoginSteps(testInfo, isLoggedIn, loginSteps) {
  let {
    page,
    authFilePrefix,
    email
  } = testInfo;
  authFilePrefix = authFilePrefix || email;
  const authFile = _path.default.resolve(_path.default.join((0, _checkAuthCookies.getAuthFileDirectory)(), `${authFilePrefix}-cookies.json`));
  const lockFileName = email.replace(/[@.]/g, '_');
  const fileMutex = new _fileMutex.default((0, _checkAuthDirectory.getLockDirectoryPath)(), lockFileName, _fileMutexConfig.fileDeletionTimeoutConfig);
  let loginUsingCookie = false;
  try {
    if ((0, _checkAuthCookies.verifyIfCookieFileExists)(authFile)) {
      console.log(`${email} Cookie file exists. Loading cookies, worker index - ${process.env.TEST_WORKER_INDEX}`);
      loginUsingCookie = true;
    } else {
      await fileMutex.acquire();
    }
    await (0, _checkAuthCookies.loadCookiesIfPresent)(page, authFile);
    const isAlreadyLoggedIn = await isLoggedIn(testInfo);
    if (!isAlreadyLoggedIn) {
      await loginSteps(testInfo);
      await isLoggedIn(testInfo);
      await page.context().storageState({
        path: authFile
      });
    }
  } catch (error) {
    console.error(`Error during login for ${email}:`, error);
  } finally {
    if (!loginUsingCookie) {
      await fileMutex.release();
    }
  }
}
var _default = exports.default = performLoginSteps;