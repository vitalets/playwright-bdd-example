"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeEnvConfig = initializeEnvConfig;
var _fs = require("fs");
var _path = _interopRequireDefault(require("path"));
var _configFileNameProvider = require("./helpers/configFileNameProvider");
var _logger = require("../../utils/logger");
var _getUsers = require("./helpers/auth/getUsers");
function setEnvironmentVariables(configJSON) {
  for (const key in configJSON) {
    process.env[key] = configJSON[key];
  }
}
function addHelperLogsForEnvInitialization() {
  _logger.Logger.log(_logger.Logger.INFO_TYPE, `Mode under which test cases should run has not been specified in args.`);
  _logger.Logger.log(_logger.Logger.INFO_TYPE, `Please specify --mode='dev/prod' while running ZDTestingFramework test`);
  _logger.Logger.log(_logger.Logger.INFO_TYPE, `Going to use default mode as dev`);
}
function initializeEnvConfig(mode, isAuthMode) {
  try {
    if (!mode) {
      addHelperLogsForEnvInitialization();
      mode = 'dev';
    }
    const configFile = (0, _fs.readFileSync)(_path.default.resolve(process.cwd(), `./${(0, _configFileNameProvider.getEnvConfigFilePath)(mode)}`));
    const configJSON = JSON.parse(configFile);
    setEnvironmentVariables({
      ...configJSON,
      mode
    });
    if (isAuthMode) {
      const defaultActorConfiguration = (0, _getUsers.getDefaultActorConf)();
      setEnvironmentVariables(defaultActorConfiguration);
    }
  } catch (err) {
    _logger.Logger.error(err);
    throw new Error(`Config File Not Exists. Please provide a config file ${(0, _configFileNameProvider.getEnvConfigFilePath)(mode)} to intiailize the environment variables `);
  }
}