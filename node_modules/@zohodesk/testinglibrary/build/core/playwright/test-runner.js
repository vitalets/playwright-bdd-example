"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.runPreprocessing = runPreprocessing;
var _child_process = require("child_process");
var _path = _interopRequireDefault(require("path"));
var _customCommands = require("./custom-commands");
var _cliArgsToObject = require("../../utils/cliArgsToObject");
var _envInitializer = require("./env-initializer");
var _logger = require("../../utils/logger");
var _readConfigFile = require("./readConfigFile");
var _rootPath = require("../../utils/rootPath");
var _tagProcessor = _interopRequireDefault(require("./tagProcessor"));
var _configUtils = require("./setup/config-utils");
var _browserTypes = require("./constants/browserTypes");
var _ConfigurationHelper = require("./configuration/ConfigurationHelper");
var _Configuration = _interopRequireDefault(require("./configuration/Configuration"));
var _UserArgs = _interopRequireDefault(require("./configuration/UserArgs"));
var _RunnerHelper = _interopRequireDefault(require("./runner/RunnerHelper"));
var _Runner = _interopRequireDefault(require("./runner/Runner"));
function runPreprocessing(tagArgs, configPath) {
  const beforeCommand = 'node';
  const bddGenPath = _path.default.resolve((0, _rootPath.getExecutableBinaryPath)('bddgen'));
  const beforeArgs = [bddGenPath, '-c', configPath];
  if (tagArgs) {
    beforeArgs.push('--tags');
    beforeArgs.push(tagArgs);
  }
  return new Promise((resolve, reject) => {
    const childProcessForPreprocessing = (0, _child_process.spawn)(beforeCommand, beforeArgs, {
      stdio: 'inherit',
      env: {
        ...process.env
      }
    });
    childProcessForPreprocessing.on('error', data => {
      _logger.Logger.log(_logger.Logger.FAILURE_TYPE, data);
      reject(data);
    });
    childProcessForPreprocessing.on('exit', code => {
      if (code === 0) {
        _logger.Logger.log(_logger.Logger.SUCCESS_TYPE, 'Feature Files Processed Successfully');
        resolve();
      } else {
        reject(`BddGen exited with code ${code}`);
      }
    });
  });
}
function runPlaywright(command, args) {
  return new Promise((resolve, reject) => {
    const childProcessForRunningPlaywright = (0, _child_process.spawn)(command, args, {
      stdio: 'inherit',
      env: {
        ...process.env
      }
    });
    childProcessForRunningPlaywright.on('error', error => {
      _logger.Logger.log(_logger.Logger.FAILURE_TYPE, error);
    });
    childProcessForRunningPlaywright.on('exit', (code, signal) => {
      if (code !== 0) {
        reject(`Child Process Exited with Code ${code} and Signal ${signal}`);
      } else {
        _logger.Logger.log(_logger.Logger.SUCCESS_TYPE, 'Test Ran Successfully');
        resolve();
      }
    });
    process.on('exit', () => {
      childProcessForRunningPlaywright.kill();
      reject('Terminating Playwright Process...');
    });
    process.on('SIGINT', () => {
      childProcessForRunningPlaywright.kill();
      reject('Cleaning up...');
    });
  });
}
function main() {
  // Getting the default config's from framework
  const uatConfig = new _Configuration.default((0, _readConfigFile.getDefaultConfig)());
  // overriding the application config's from project
  const userArgConfig = new _Configuration.default(_UserArgs.default.parseToObject(process.argv.slice(2)));
  const mode = userArgConfig.get("mode");
  uatConfig.addAll(new _Configuration.default((0, _ConfigurationHelper.getApplicationConfig)(mode)));
  // overriding the user config's from CLI
  uatConfig.addAll(userArgConfig);
  const modules = uatConfig.get('modules');

  //We need to change this process.env variable to pass the module name in future.
  process.env.modules = modules;
  const {
    isAuthMode,
    editionOrder,
    debug,
    bddMode = false,
    headless = false
  } = uatConfig.getAll();
  (0, _envInitializer.initializeEnvConfig)(mode, isAuthMode);

  //This is only used for pass the user arguments to need places in legacy code. We need to rewamp that also.
  const userArgsObject = userArgConfig.getAll();
  const tagProcessor = new _tagProcessor.default(editionOrder);
  const tagArgs = tagProcessor.processTags(userArgsObject);
  const runnerObj = new _Runner.default();
  runnerObj.setTagArgs(tagArgs);
  runnerObj.setUserArgs(userArgsObject);
  runnerObj.setConfig(uatConfig);
  const runner = _RunnerHelper.default.createRunner('spawn', runnerObj);
  runner.run();
}
var _default = exports.default = main;