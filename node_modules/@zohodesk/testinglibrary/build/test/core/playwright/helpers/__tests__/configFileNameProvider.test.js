"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _fs = require("fs");
var _path = _interopRequireDefault(require("path"));
var _configFileNameProvider = require("../../../../../core/playwright/helpers/configFileNameProvider");
jest.mock('fs');
jest.mock('path');
const mockCwd = '/mock/current/directory';
_path.default.resolve = jest.fn();
process.cwd = jest.fn(() => mockCwd);
describe('getUATFileName', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  test('return the pipeline matched config files for pipeline matched files exists', () => {
    const mode = 'cd';
    const mockPath = `${mockCwd}/uat/conf/${mode}/uat.config.js`;
    _fs.existsSync.mockReturnValue(true);
    _path.default.resolve.mockImplementation((...args) => args.join('/'));
    const result = (0, _configFileNameProvider.getUATFileName)(mode);
    expect(_fs.existsSync).toHaveBeenCalledWith(mockPath);
    expect(result).toBe(mockPath);
  });
  test('return the default config files for pipeline matched files not exists', () => {
    const mode = 'ci';
    const defaultPath = `${mockCwd}/uat/conf/default/uat.config.js`;
    _fs.existsSync.mockReturnValue(false);
    _path.default.resolve.mockImplementation((...args) => args.join('/'));
    const result = (0, _configFileNameProvider.getUATFileName)(mode);
    expect(_fs.existsSync).toHaveBeenCalledWith(`${mockCwd}/uat/conf/${mode}/uat.config.js`);
    expect(result).toBe(defaultPath);
  });
});