"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _fs = require("fs");
var _path = _interopRequireDefault(require("path"));
jest.mock('fs');
jest.mock('path');
jest.mock('../../../../../core/playwright/readConfigFile', () => ({
  generateConfigFromFile: jest.fn(() => ({
    uatDirectory: '/test/directory'
  })),
  getRunMode: jest.fn(() => 'dev')
}));
const {
  getListOfActors
} = require('../../../../../core/playwright/helpers/auth/getUsers');
describe('getListOfActors', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    _path.default.join.mockImplementation((...args) => args.join('/'));
  });
  test('throws an error when config file cannot be loaded', () => {
    _fs.existsSync.mockReturnValueOnce(true); // Main config file exists

    jest.mock('/test/directory/conf/dev/actors/index.js', () => {
      throw new Error('Loading error');
    }, {
      virtual: true
    });
    expect(() => getListOfActors()).toThrow('Error loading actor configuration from /test/directory/conf/dev/actors/index.js');
  });
  test('throws an error when beta feature config does not exist', () => {
    _fs.existsSync.mockReturnValueOnce(true) // Main config file exists
    .mockReturnValueOnce(false); // Beta feature config does not exist in either path

    const betaFeature = 'nonExistentFeature';
    expect(() => getListOfActors(betaFeature)).toThrow(`There is no beta feature configured with the name "${betaFeature}"`);
  });
  test('loads main configuration when betaFeature is not provided and main config file exists', () => {
    _fs.existsSync.mockReturnValueOnce(true);
    jest.doMock('/test/directory/conf/dev/actors/index.js', () => ({
      actors: []
    }), {
      virtual: true
    });
    const result = getListOfActors();
    expect(result).toEqual({
      actors: []
    });
  });
  test('falls back to default configuration if main config file does not exist', () => {
    _fs.existsSync.mockReturnValueOnce(false).mockReturnValueOnce(true);
    jest.doMock('/test/directory/conf/default/actors/index.js', () => ({
      actors: []
    }), {
      virtual: true
    });
    const result = getListOfActors();
    expect(result).toEqual({
      actors: []
    });
  });
  test('loads beta feature configuration when betaFeature is provided', () => {
    _fs.existsSync.mockReturnValueOnce(true) // Main config file exists
    .mockReturnValueOnce(true); // Beta feature config exists

    const betaFeature = 'parentchild';
    const betaFeaturePath = `/test/directory/conf/dev/actors/beta/${betaFeature}/index.js`;
    jest.doMock(betaFeaturePath, () => ({
      betaActors: []
    }), {
      virtual: true
    });
    const result = getListOfActors(betaFeature);
    expect(result).toEqual({
      betaActors: []
    });
    expect(_path.default.join).toHaveBeenCalledWith('/test/directory', `conf/dev/actors/beta/${betaFeature}/index.js`);
  });
});