"use strict";

const Configuration = require("../../../../../core/playwright/configuration/Configuration");
const {
  combineConfiguration
} = require("../../../../../core/playwright/configuration/ConfigurationHelper");
jest.mock('../../../../../core/playwright/configuration/ConfigurationHelper', () => ({
  combineConfiguration: jest.fn()
}));
describe('Configuration Class', () => {
  let config;
  let sampleData;
  beforeEach(() => {
    // Sample data as a JSON object
    sampleData = {
      headless: false,
      trace: true,
      video: true,
      bddMode: true
    };

    // Initialize the Configuration instance with sample data
    config = new Configuration(sampleData);
  });
  test('should add new key-value pair to the configuration', () => {
    config.add('newKey', 'newValue');
    expect(config.get('newKey')).toBe('newValue');
  });
  test('should combine configurations correctly using addAll', () => {
    const newConfig = new Configuration({
      newKey1: 'newValue1',
      trace: false // existing key to test override
    });
    const combinedConfig = {
      headless: false,
      trace: false,
      // trace overridden
      video: true,
      bddMode: true,
      newKey1: 'newValue1'
    };
    combineConfiguration.mockReturnValue(combinedConfig);
    config.addAll(newConfig);
    expect(combineConfiguration).toHaveBeenCalledWith(sampleData, newConfig.getAll());
    expect(config.getAll()).toEqual(combinedConfig);
  });
  test('should return correct value for a given key', () => {
    expect(config.get('headless')).toBe(false);
    expect(config.get('trace')).toBe(true);
    expect(config.get('video')).toBe(true);
    expect(config.get('bddMode')).toBe(true);
  });
});