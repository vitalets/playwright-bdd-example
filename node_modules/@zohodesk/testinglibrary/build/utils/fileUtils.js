"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkIfFileExists = checkIfFileExists;
exports.checkIfFolderExistsWithPattern = checkIfFolderExistsWithPattern;
exports.deleteFile = deleteFile;
exports.deleteFolder = deleteFolder;
exports.readFileContents = readFileContents;
exports.writeFileContents = writeFileContents;
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _logger = require("./logger");
var glob = _interopRequireWildcard(require("glob"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
function checkIfFileExists(file) {
  try {
    _fs.default.accessSync(file, _fs.default.constants.F_OK);
    return true;
  } catch (err) {
    _logger.Logger.error(err);
    return false;
  }
}
function readFileContents(filePath) {
  try {
    let fileContents = _fs.default.readFileSync(filePath, 'utf-8');
    return fileContents;
  } catch (err) {
    _logger.Logger.error(err);
    return null;
  }
}
function writeFileContents(filePath, content, writeOptions = {}) {
  const directoryPath = _path.default.dirname(filePath);

  // Check if the directory exists
  if (!_fs.default.existsSync(directoryPath)) {
    _fs.default.mkdirSync(directoryPath, {
      recursive: true
    });
  }
  try {
    _fs.default.writeFileSync(`${filePath}`, content, writeOptions);
  } catch (err) {
    _logger.Logger.error(err);
    throw new Error(err);
  }
}
function deleteFile(filePath) {
  if (checkIfFileExists(filePath)) {
    try {
      _fs.default.unlinkSync(filePath);
    } catch (err) {
      _logger.Logger.error(err);
      throw new Error(`Error while deleting the test data file: ${filePath}`);
    }
  } else {
    _logger.Logger.log(_logger.Logger.INFO_TYPE, `File Does not Exist in the path ${filePath}`);
  }
}
function deleteFolder(folderPath) {
  if (_fs.default.existsSync(folderPath)) {
    try {
      _fs.default.rmdirSync(folderPath, {
        recursive: true
      });
    } catch (err) {
      _logger.Logger.error(err);
      throw new Error(`Error while deleting the test data file: ${folderPath}`);
    }
  }
}

// This function uses glob to check if a folder exists with a specific pattern
// Glob is define patterns for matching file and directory names based on wildcards
function checkIfFolderExistsWithPattern(folderPath) {
  try {
    if (glob.sync(folderPath).length > 0) {
      return true;
    }
    return false;
  } catch (err) {
    _logger.Logger.error(err);
    return false;
  }
}