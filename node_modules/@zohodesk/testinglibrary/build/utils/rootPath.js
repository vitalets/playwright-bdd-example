"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBinPath = getBinPath;
exports.getExecutableBinaryPath = getExecutableBinaryPath;
exports.getRootNodeModulesPath = getRootNodeModulesPath;
exports.getRootPath = getRootPath;
var _path = _interopRequireDefault(require("path"));
var _fs = _interopRequireDefault(require("fs"));
var _logger = require("./logger");
var _getFilePath = _interopRequireDefault(require("./getFilePath"));
// TODO: Publish and check this change of finding package.json working fine.
function findPath(directory, pathToFind) {
  const filePath = _path.default.join(directory, pathToFind);
  if (_fs.default.existsSync(filePath)) {
    return filePath;
  }
  const parentDir = _path.default.dirname(directory);
  if (parentDir === directory) {
    return null;
  }
  return findPath(parentDir, pathToFind);
}
function findPackageJSON(startDir) {
  return findPath(startDir, 'package.json');
}
function findBinaryPath(directory, command) {
  const binaryPath = _path.default.join('.bin', (0, _getFilePath.default)(command));
  return findPath(directory, binaryPath);
}
function getRootPath() {
  return findPackageJSON(_path.default.resolve(__dirname));
}
function getRootNodeModulesPath() {
  const rootPath = getRootPath();
  return _path.default.resolve(_path.default.dirname(rootPath), 'node_modules');
}
function getBinPath(command) {
  const packageNodeModulesPath = getRootNodeModulesPath();
  return findBinaryPath(packageNodeModulesPath, command);
}
function getExecutableBinaryPath(command) {
  const binPath = getBinPath(command);
  if (binPath !== null) {
    return binPath;
  } else {
    _logger.Logger.log(_logger.Logger.FAILURE_TYPE, `Error: Could not find executable bin ${command} file. Make sure to npm install before proceeding`);
    process.exit();
  }
}