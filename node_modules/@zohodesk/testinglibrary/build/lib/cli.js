"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _testRunner = _interopRequireDefault(require("../core/playwright/test-runner"));
var _reportGenerator = _interopRequireDefault(require("../core/playwright/report-generator"));
var _codegen = _interopRequireDefault(require("../core/playwright/codegen"));
var _logger = require("../utils/logger");
var _setupProject = _interopRequireDefault(require("../setup-folder-structure/setupProject"));
var _parser = require("../parser/parser");
var _clearCaches = _interopRequireDefault(require("../core/playwright/clear-caches"));
var _helper = _interopRequireDefault(require("../setup-folder-structure/helper"));
var _parseUserArgs = _interopRequireDefault(require("../core/playwright/helpers/parseUserArgs"));
var _validateFeature = _interopRequireDefault(require("../core/playwright/validateFeature"));
// import createJestRunner from '../core/jest/runner/jest-runner';

const [,, option, ...otherOptions] = process.argv;
switch (option) {
  case 'test':
    {
      _logger.Logger.log(_logger.Logger.SUCCESS_TYPE, 'Running Tests..');
      (0, _testRunner.default)();
      //createJestRunner();
      break;
    }
  case 'validate':
    {
      (0, _validateFeature.default)();
      break;
    }
  case 're-run-failed':
    {
      _logger.Logger.log(_logger.Logger.SUCCESS_TYPE, 'Running Failed Tests..');
      let {
        filePath
      } = (0, _parseUserArgs.default)();
      process.env.isRerunFailedCases = true;
      process.env.filePath = filePath;
      (0, _testRunner.default)();
      break;
    }
  case 'report':
    {
      // console.log('\x1b[36mGenerating Reports...\x1b[0m');
      _logger.Logger.log(_logger.Logger.SUCCESS_TYPE, 'Generating Reports...');
      (0, _reportGenerator.default)();
      break;
    }
  case 'codegen':
    {
      _logger.Logger.log(_logger.Logger.INFO_TYPE, 'The purpose of codegen is to assist developer .....');
      (0, _codegen.default)();
      break;
    }
  case 'init':
    {
      _logger.Logger.log(_logger.Logger.SUCCESS_TYPE, 'Initializing projects...');
      (0, _setupProject.default)();
      break;
    }
  case 'generateSpecFile':
    {
      _logger.Logger.log(_logger.Logger.SUCCESS_TYPE, 'Generating Spec file...');
      (0, _parser.generateSpecCodeForFeatureFile)(otherOptions);
      break;
    }
  case 'clearCaches':
    {
      _logger.Logger.log(_logger.Logger.SUCCESS_TYPE, 'Clearing caches...');
      (0, _clearCaches.default)();
      break;
    }
  case 'help':
  default:
    {
      (0, _helper.default)();
      break;
    }
}