import {
  expect,
  test,
  createBdd
} from './core/playwright/index';
import { fireEvent, render } from '@testing-library/react';
import {
  PlaywrightTestArgs,
  PlaywrightTestOptions,
  PlaywrightWorkerArgs,
  PlaywrightWorkerOptions,
  TestType,
  Page
} from '@playwright/test';
import { DefineStepPattern } from '@cucumber/cucumber/lib/support_code_library_builder/types';

export type KeyValue = { [key: string]: any };

export type BuiltInFixturesWorker = PlaywrightWorkerArgs &
  PlaywrightWorkerOptions;
export type BuiltInFixtures = PlaywrightTestArgs &
  PlaywrightTestOptions &
  BuiltInFixturesWorker;

export type FixturesArg<T extends KeyValue = {}, W extends KeyValue = {}> = T &
  W &
  BuiltInFixtures;

export declare let hasCustomTest: boolean;

export declare function createBdd<
  T extends KeyValue = BuiltInFixtures,
  W extends KeyValue = BuiltInFixturesWorker,
  World
>(
  customTest?: TestType<T, W> | null,
  _CustomWorld?: new (...args: any[]) => World
): {
  Given: (pattern: DefineStepPattern, fn: StepFunction<T, W>) => void;
  When: (pattern: DefineStepPattern, fn: StepFunction<T, W>) => void;
  Then: (pattern: DefineStepPattern, fn: StepFunction<T, W>) => void;
  And: (pattern: DefineStepPattern, fn: StepFunction<T, W>) => void;
  But: (pattern: DefineStepPattern, fn: StepFunction<T, W>) => void;
  Step: (pattern: DefineStepPattern, fn: StepFunction<T, W>) => void;
  Before: any;
  After: any;
  BeforeAll: any;
  AfterAll: any;
};

type StepFunctionFixturesArg<
  T extends KeyValue,
  W extends KeyValue
> = FixturesArg<T, W>;
type StepFunction<T extends KeyValue, W extends KeyValue> = (
  fixtures: StepFunctionFixturesArg<T, W>,
  ...args: any[]
) => unknown;

const { Given, Then, When, Step, And, But } = createBdd();

type UserConfig = import('./core/playwright/readConfigFile').UserConfig;

export {
  UserConfig,
  Given,
  Then,
  When,
  Step,
  And,
  But,
  expect,
  test,
  createBdd,
  Page
};

export * from '@playwright/test/types/test';
