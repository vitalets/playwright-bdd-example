"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = setupProject;
var _fs = require("fs");
var _path = _interopRequireDefault(require("path"));
var _logger = require("../utils/logger");
function getScriptsToBeAdded() {
  return {
    "uat": "ZDTestingFramework test --mode=dev --headed",
    "uat-debug": "ZDTestingFramework test --mode=dev --debug",
    "uat-validate": "ZDTestingFramework validate",
    "uat-report": "ZDTestingFramework report --port=9009",
    "codegen": "ZDTestingFramework codegen deskclientapp.localzoho.com/agent"
  };
}
function updatePackageJSONScripts() {
  const packageJsonPath = _path.default.resolve(process.cwd(), './package.json');
  if ((0, _fs.existsSync)(packageJsonPath)) {
    const packageContents = (0, _fs.readFileSync)(packageJsonPath);
    const configJSON = JSON.parse(packageContents);
    const {
      scripts = {}
    } = configJSON;
    const modifiedScripts = {
      ...scripts,
      ...getScriptsToBeAdded()
    };
    const modifiedConfigJSON = {
      ...configJSON,
      scripts: modifiedScripts
    };
    (0, _fs.writeFileSync)(packageJsonPath, JSON.stringify(modifiedConfigJSON, null, 2));
  } else {
    _logger.Logger.log(_logger.Logger.FAILURE_TYPE, 'Unable to find package json. Run init command in the root path of the project.');
  }
}
function createFolderForUAT() {
  const uatFolder = _path.default.resolve(process.cwd(), 'uat');
  if ((0, _fs.existsSync)(uatFolder)) {
    _logger.Logger.log(_logger.Logger.INFO_TYPE, 'Uat Folder already Exists.');
  } else {
    _logger.Logger.log(_logger.Logger.INFO_TYPE, 'Creating Uat Folder');
    (0, _fs.mkdirSync)(uatFolder);
  }
}
function getSetupFileAsString(fileName) {
  return (0, _fs.readFileSync)(_path.default.resolve(__dirname, './samples/', fileName)).toString();
}
function createUatConfig() {
  const uatConfigPath = _path.default.resolve(process.cwd(), 'uat.config.js');
  if ((0, _fs.existsSync)(uatConfigPath)) {
    _logger.Logger.log(_logger.Logger.INFO_TYPE, 'Uat Config already Exists.');
  } else {
    _logger.Logger.log(_logger.Logger.INFO_TYPE, 'Creating Uat config file...');
    (0, _fs.writeFileSync)(uatConfigPath, getSetupFileAsString('uat-config-sample.js'), null, 2);
  }
}
function createAuthenticationFile() {
  const isUATexist = _path.default.resolve(process.cwd(), 'uat');
  if ((0, _fs.existsSync)(isUATexist)) {
    try {
      if (!(0, _fs.existsSync)(_path.default.resolve(process.cwd(), 'uat', 'fixtures'))) {
        (0, _fs.mkdirSync)(_path.default.resolve(process.cwd(), 'uat', 'fixtures'));
      }
      if (!(0, _fs.existsSync)(_path.default.resolve(process.cwd(), 'uat', 'playwright', '.auth'))) {
        (0, _fs.mkdirSync)(_path.default.resolve(process.cwd(), 'uat', 'playwright', '.auth'), {
          recursive: true
        });
      }
      (0, _fs.writeFileSync)(_path.default.resolve(process.cwd(), 'uat', 'fixtures', 'auth.setup.js'), getSetupFileAsString('auth-setup-sample.js'), null, 2);
      _logger.Logger.log(_logger.Logger.INFO_TYPE, 'Creating Authentication File ....');
      (0, _fs.writeFileSync)(_path.default.resolve(process.cwd(), 'uat', 'fixtures', 'accountLogin.js'), getSetupFileAsString('accountLogin-sample.js'), null, 2);
      _logger.Logger.log(_logger.Logger.INFO_TYPE, 'Creating login script File ....');
      (0, _fs.writeFileSync)(_path.default.resolve(process.cwd(), 'uat', 'fixtures', 'testSetup.js'), getSetupFileAsString('testSetup-sample.js'), null, 2);
      _logger.Logger.log(_logger.Logger.INFO_TYPE, 'Creating testSetup File ....');
    } catch (err) {
      _logger.Logger.error(err);
      _logger.Logger.log(_logger.Logger.FAILURE_TYPE, 'Something went wrong ! Folder not Created. Please re-initialize npm init-uat');
    }
  } else {
    _logger.Logger.log(_logger.Logger.INFO_TYPE, 'Something went wrong. Please re-initialize the @zohodesk/testinglibrary');
  }
}
function createConfigJson() {
  const uatFolder = _path.default.resolve(process.cwd(), 'uat');
  if ((0, _fs.existsSync)(uatFolder)) {
    _logger.Logger.log(_logger.Logger.INFO_TYPE, 'Creating settings.json file inside UAT Folder');
    if (!(0, _fs.existsSync)(_path.default.resolve(uatFolder, 'conf', 'default'))) {
      (0, _fs.mkdirSync)(_path.default.resolve(uatFolder, 'conf', 'default'), {
        recursive: true
      });
    }
    (0, _fs.writeFileSync)(_path.default.resolve(uatFolder, 'conf', 'default', './settings.json'), getSetupFileAsString('settings.json'), null, 2);
    if (!(0, _fs.existsSync)(_path.default.resolve(uatFolder, 'conf', 'default', 'actors', 'editions'))) {
      (0, _fs.mkdirSync)(_path.default.resolve(uatFolder, 'conf', 'default', 'actors', 'editions'), {
        recursive: true
      });
    }
    (0, _fs.writeFileSync)(_path.default.resolve(uatFolder, 'conf', 'default', 'actors', 'editions', 'free.json'), getSetupFileAsString('free-sample.json'), null, 2);
    (0, _fs.writeFileSync)(_path.default.resolve(uatFolder, 'conf', 'default', 'actors', 'editions', 'index.js'), getSetupFileAsString('editions-index.js'), null, 2);
    (0, _fs.writeFileSync)(_path.default.resolve(uatFolder, 'conf', 'default', 'actors', 'index.js'), getSetupFileAsString('actors-index.js'), null, 2);
  } else {
    _logger.Logger.log(_logger.Logger.INFO_TYPE, 'Something went wrong. Please re-initialize the @zohodesk/testinglibrary');
  }
}
function setupProject() {
  updatePackageJSONScripts();
  createUatConfig();
  createFolderForUAT();
  createConfigJson();
  createAuthenticationFile();
  //updateGitIgnore()
  // Create folder for playwright . Inside .auth folder needs to be created. user.json
  // Add playwright and test-results to .gitignore
  setTimeout(() => {
    _logger.Logger.log(_logger.Logger.SUCCESS_TYPE, 'Setup Project is Ready ..');
  }, 2000);
}