import { existsSync, readFileSync, writeFileSync } from 'fs';
import path from 'path';
import { Logger } from '../utils/logger';
import { generateConfigFromFile } from '../core/playwright/readConfigFile';
const gitIgnoreAbsolutePath = path.resolve(process.cwd(), '../', '../')

const { reportPath = path.resolve(process.cwd(), 'uat', 'playwright-reports') } = generateConfigFromFile();
const testResultsPath = path.resolve(process.cwd(), 'uat', 'test-results');

const testResultsRelativepath = path.relative(gitIgnoreAbsolutePath, testResultsPath)
const reportRelativepath = path.relative(gitIgnoreAbsolutePath, reportPath)


const absolutePathfeaturegen = path.resolve(process.cwd(), 'uat', '.features-gen');
const featuregenRelativePath = path.relative(gitIgnoreAbsolutePath,absolutePathfeaturegen)

const dirpathtoIgnore = `${testResultsRelativepath}\n${reportRelativepath}\n${featuregenRelativePath}`

function updateGitIgnore() {
  if (existsSync(path.resolve(process.cwd(), '../', '../', '.gitignore'))) {
    let gitIgnoreData = readFileSync(path.resolve(process.cwd(), '../', '../', '.gitignore'), 'utf-8', (err) => {
      if (err) {
        Logger.log(Logger.FAILURE_TYPE, 'cannot able to read git ignore ')
        // process.exit()
      }
    })
    if (gitIgnoreData.includes(dirpathtoIgnore)) {
      return
    } else {
      writeFileSync(path.resolve(process.cwd(), '../', '../', '.gitignore', dirpathtoIgnore, null, 2))
    }
  } else {
    Logger.log(Logger.INFO_TYPE, 'GitIgnore file is No Found ....')
  }
}

export default updateGitIgnore;